<roblox xmlns:xmime="http://www.w3.org/2005/05/xmlmime" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="http://www.roblox.com/roblox.xsd" version="4">
	<Meta name="ExplicitAutoJoints">true</Meta>
	<External>null</External>
	<External>nil</External>
	<Item class="LocalScript" referent="RBX866D8F120B75486FA01D62401AFF9FFF">
		<Properties>
			<BinaryString name="AttributesSerialize"></BinaryString>
			<SecurityCapabilities name="Capabilities">0</SecurityCapabilities>
			<bool name="DefinesCapabilities">false</bool>
			<bool name="Disabled">false</bool>
			<Content name="LinkedSource"><null></null></Content>
			<string name="Name">InventoryClient</string>
			<token name="RunContext">0</token>
			<string name="ScriptGuid">{1AC4D436-F788-41C3-9C97-BDE6C3B0DD9B}</string>
			<ProtectedString name="Source"><![CDATA[-- Version 1.0.2
-- InventoryClient: `키로 여닫는 인벤토리(그리드) UI. 아이콘+수량 표시(읽기 전용)
-- 초보 설명:
--  - Player/Inventory 값을 읽어 그리드로 보여줍니다.
--  - 아이콘은 Shared/ItemIcons를 사용합니다.

local Players = game:GetService("Players")
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local UserInputService = game:GetService("UserInputService")

local function requireShared(name)
	local sharedFolder = ReplicatedStorage:FindFirstChild("Shared")
	if sharedFolder and sharedFolder:FindFirstChild(name) then
		return require(sharedFolder[name])
	end
	return require(ReplicatedStorage:WaitForChild(name))
end

local ItemIcons = requireShared("ItemIcons")
local ShopConfig = requireShared("ShopConfig")

local lp = Players.LocalPlayer
local gui = Instance.new("ScreenGui")
gui.Name = "InventoryGui"
gui.IgnoreGuiInset = true
gui.ResetOnSpawn = false
gui.Enabled = false
gui.Parent = lp:WaitForChild("PlayerGui")

local root = Instance.new("Frame")
root.BackgroundColor3 = Color3.fromRGB(20,20,24)
root.BackgroundTransparency = 0.1
root.Size = UDim2.fromScale(0.5, 0.6)
root.Position = UDim2.fromScale(0.25, 0.2)
root.Parent = gui
root.ZIndex = 30

local title = Instance.new("TextLabel")
title.Text = "인벤토리"
title.Font = Enum.Font.GothamBold
title.TextSize = 22
title.TextColor3 = Color3.new(1,1,1)
title.BackgroundTransparency = 1
title.Size = UDim2.new(1, -20, 0, 36)
title.Position = UDim2.new(0, 10, 0, 10)
title.Parent = root

local grid = Instance.new("Frame")
grid.BackgroundTransparency = 1
grid.Size = UDim2.new(1, -20, 1, -60)
grid.Position = UDim2.new(0, 10, 0, 50)
grid.Parent = root

-- v1.0.2: 레이아웃 보장(파괴되었으면 재생성)
local uiGrid : UIGridLayout? = nil
local function ensureGridLayout()
	if uiGrid and uiGrid.Parent == grid then return end
	uiGrid = Instance.new("UIGridLayout")
	uiGrid.CellSize = UDim2.fromOffset(96, 96)
	uiGrid.CellPadding = UDim2.fromOffset(8, 8)
	uiGrid.Parent = grid
end
ensureGridLayout()


local function makeCell(nameText, iconId, count)
	local f = Instance.new("Frame")
	f.BackgroundColor3 = Color3.fromRGB(28,28,32)
	f.BackgroundTransparency = 0.2

	local img = Instance.new("ImageLabel")
	img.BackgroundTransparency = 1
	img.Size = UDim2.fromScale(0.8, 0.7)
	img.AnchorPoint = Vector2.new(0.5, 0)
	img.Position = UDim2.fromScale(0.5, 0.12)
	img.Image = iconId or ""
	img.ImageTransparency = iconId and 0 or 0.2
	img.Parent = f

	local name = Instance.new("TextLabel")
	name.BackgroundTransparency = 1
	name.Text = nameText
	name.Font = Enum.Font.Gotham
	name.TextSize = 14
	name.TextColor3 = Color3.fromRGB(230,230,230)
	name.Size = UDim2.fromScale(1, 0.2)
	name.Position = UDim2.fromScale(0, 0.72)
	name.Parent = f

	local qty = Instance.new("TextLabel")
	qty.BackgroundTransparency = 1
	qty.Text = tostring(count or 0)
	qty.Font = Enum.Font.GothamBold
	qty.TextSize = 16
	qty.TextColor3 = Color3.fromRGB(255,210,100)
	qty.AnchorPoint = Vector2.new(1,1)
	qty.Position = UDim2.fromScale(0.98, 0.98)
	qty.Size = UDim2.fromOffset(40, 20)
	qty.Parent = f

	return f
end

local function rebuild()
	-- v1.0.2: 셀만 정리하고, 레이아웃은 보존/필요시 재생성
	for _, child in ipairs(grid:GetChildren()) do
		if not child:IsA("UIGridLayout") then
			child:Destroy()
		end
	end
	ensureGridLayout()


	local inv = lp:FindFirstChild("Inventory")
	local amounts = {}
	if inv then
		for _, v in ipairs(inv:GetChildren()) do
			if v:IsA("IntValue") then
				amounts[v.Name] = v.Value
			end
		end
	end

	-- ShopConfig.Items 순서대로 렌더
	for _, it in ipairs(ShopConfig.Items) do
		local id, name = it.id, it.name
		local icon = ItemIcons[id]
		local count = amounts[id] or 0
		local cell = makeCell(name, icon, count)
		cell.Parent = grid
	end
end

-- I 키 토글
UserInputService.InputBegan:Connect(function(inp, gp)
	if gp then return end
	if inp.KeyCode == Enum.KeyCode.Backquote then -- ` 키
		gui.Enabled = not gui.Enabled
		if gui.Enabled then rebuild() end
	end
end)

-- 인벤토리 변화 시 자동 갱신(열려 있을 때)
local function watchInv(inv)
	local function onChange()
		if gui.Enabled then rebuild() end
	end
	inv.ChildAdded:Connect(onChange)
	inv.ChildRemoved:Connect(onChange)
	for _, v in ipairs(inv:GetChildren()) do
		if v:IsA("IntValue") then
			v:GetPropertyChangedSignal("Value"):Connect(onChange)
		end
	end
end
local inv0 = lp:FindFirstChild("Inventory")
if inv0 then watchInv(inv0) else
	lp.ChildAdded:Connect(function(c)
		if c.Name == "Inventory" then watchInv(c) end
	end)
end
]]></ProtectedString>
			<int64 name="SourceAssetId">-1</int64>
			<BinaryString name="Tags"></BinaryString>
		</Properties>
	</Item>
</roblox>