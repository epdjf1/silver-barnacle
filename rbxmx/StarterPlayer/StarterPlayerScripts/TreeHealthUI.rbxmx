<roblox xmlns:xmime="http://www.w3.org/2005/05/xmlmime" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="http://www.roblox.com/roblox.xsd" version="4">
	<Meta name="ExplicitAutoJoints">true</Meta>
	<External>null</External>
	<External>nil</External>
	<Item class="LocalScript" referent="RBX25EF85330C734572B688A158218A1A5D">
		<Properties>
			<BinaryString name="AttributesSerialize"></BinaryString>
			<SecurityCapabilities name="Capabilities">0</SecurityCapabilities>
			<bool name="DefinesCapabilities">false</bool>
			<bool name="Disabled">false</bool>
			<Content name="LinkedSource"><null></null></Content>
			<string name="Name">TreeHealthUI</string>
			<token name="RunContext">0</token>
			<string name="ScriptGuid">{F3666A5D-9428-4A72-B8CD-F717800B47EE}</string>
			<ProtectedString name="Source"><![CDATA[-- Version 1.0
-- TreeHealthUI: 모든 나무(Model)에 체력바를 부착/갱신하는 클라이언트 스크립트
-- 초보 설명:
--  - 서버가 나무에 붙여둔 Attribute(HP, MaxHP, TreeState)를 감지해 체력바를 보여줍니다.
--  - 성장중(Growing) 또는 HP==0이면 숨기고, 성목(Mature)이면 보입니다.

local ReplicatedStorage = game:GetService("ReplicatedStorage")
local RunService = game:GetService("RunService")
local HealthBar3D = require(ReplicatedStorage:WaitForChild("Shared"):WaitForChild("UI"):WaitForChild("HealthBar3D"))

local TreesFolder = workspace:WaitForChild("Trees", 5) or workspace

local function shouldAttach(model: Instance)
	return model:IsA("Model") and model:GetAttribute("TreeState") ~= nil
end

local attached = {}  -- [model] = gui

local function refresh(model: Model)
	local gui = attached[model] or HealthBar3D.Attach(model)
	if not gui then return end
	attached[model] = gui

	local hp = model:GetAttribute("HP") or 0
	local max = model:GetAttribute("MaxHP") or 3
	local state = model:GetAttribute("TreeState")

	HealthBar3D.Update(gui, hp, max)
	HealthBar3D.SetVisible(gui, state == "Mature" and hp > 0)
end

local function hook(model: Model)
	if not shouldAttach(model) then return end
	if attached[model] then return end
	refresh(model)

	-- 변화 감지
	model:GetAttributeChangedSignal("HP"):Connect(function() refresh(model) end)
	model:GetAttributeChangedSignal("MaxHP"):Connect(function() refresh(model) end)
	model:GetAttributeChangedSignal("TreeState"):Connect(function() refresh(model) end)

	model.AncestryChanged:Connect(function(_, parent)
		if not parent then
			local gui = attached[model]
			if gui then gui:Destroy() end
			attached[model] = nil
		end
	end)
end

-- 초기 부착 + 이후 추가되는 나무
for _, m in ipairs(TreesFolder:GetChildren()) do hook(m) end
TreesFolder.ChildAdded:Connect(function(m) hook(m) end)
]]></ProtectedString>
			<int64 name="SourceAssetId">-1</int64>
			<BinaryString name="Tags"></BinaryString>
		</Properties>
	</Item>
</roblox>